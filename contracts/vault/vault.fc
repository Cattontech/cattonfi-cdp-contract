#pragma version >=0.4.4;
#include "../imports/errors.fc";
#include "../imports/utils.fc";
#include "storage.fc";
#include "vault-gas.fc";
#include "op-codes.fc";
#include "vault-helper.fc";

int calculate_ton_cton_ratio() inline {
    if(vault::total_deposited == 0) {
        return ONE_TON;
    }
    int total_cton = cton::total_supply + cton::total_staked;
    if (total_cton == 0) {
        return ONE_TON;
    }
    return vault::total_deposited * ONE_TON / total_cton;
}

() send_message_to_wallet(slice owner_address, builder body, int need_state_init, int coins, int mode) impure inline_ref {
    builder state_init =  calculate_vault_wallet_state_init(owner_address, my_address(), vault::wallet_code);
    slice dst = calculate_address(state_init.end_cell());
    send_raw_message(create_msg(TRUE, dst, need_state_init ? state_init : null(), body, coins), mode);
}

() is_from_vault_wallet_address(slice from_address, slice sender_address) {
    check_same_workchain(from_address);
    slice dst =  calculate_user_vault_wallet_address(from_address, my_address(), vault::wallet_code);
    throw_unless(error::invalid_sender, equal_slices(dst, sender_address));
}

() on_bounce(slice in_msg_body) impure inline {
    in_msg_body~skip_bounced_prefix();

    (int op, int query_id) = in_msg_body~load_op_and_query_id();
    (int is_open?, slice controller_address, slice admin_address) = load_data();
    if(op == op::request_mint_cton) {
        int unstake_amount = in_msg_body~load_coins();
        cton::total_staked += unstake_amount;
        cton::total_supply -= unstake_amount;
        save_data(is_open?, controller_address, admin_address);
    } elseif (op == op::mint_ctUSD) {
        int borrow_amount = in_msg_body~load_coins();
        ctUSD::total_supply -= borrow_amount;
        ctUSD::total_borrow -= borrow_amount;
        save_data(is_open?, controller_address, admin_address);
    }
}

() update_reward_debt(int current_time) impure inline {
    (cton::acc_reward_per_share, cton::last_reward_time) = cal_reward_debt(current_time, cton::reward_per_second, cton::acc_reward_per_share, cton::last_reward_time, cton::total_staked);
}

() accrue_interest(int current_time) impure inline {
    int total_amount = calculate_collateral_value(cton::total_staked, oracle::cton_price);
    (ctUSD::borrow_index, ctUSD::last_accrual_time) = cal_accrue_interest(current_time, ctUSD::interest_rate, ctUSD::borrow_index, ctUSD::last_accrual_time, ctUSD::accrual_interval, ctUSD::total_borrow, total_amount);
}

() validate_oracle(slice ds_oracle_data) impure inline_ref {
    slice signature = ds_oracle_data~load_bits(512);
    slice packedData = ds_oracle_data~load_ref().begin_parse();

    throw_unless(error::invalid_oracle_data, check_signature(slice_hash(packedData), signature, oracle::provider_public_key));
        
    int latest_timestamp = packedData~load_uint32();
    int asset_key = packedData~load_uint(256);
    int price = packedData~load_coins();
    throw_unless(error::invalid_oracle_data, price > 0);
    throw_unless(error::invalid_latest_timestamp, (latest_timestamp + oracle::deviation_threshold) > now());
    throw_unless(error::invalid_asset_key, asset_key == oracle::assets_key);
    oracle::cton_price = price * calculate_ton_cton_ratio() / ONE_TON;
   
    accrue_interest(now());
}

() direct_conversion(int my_balance, int msg_value, int convert_amount, slice to_address, int is_recieve_ton) impure inline {
    throw_unless(error::insufficient_fee, msg_value >= vault_convert_fee() + fee_min_jetton());
    int amount_cton = convert_ctUSD_to_cTon(convert_amount, oracle::cton_price);
    int fee_in_cton = calculate_fee(amount_cton, ctUSD::repay_without_debt_fee);
    int tranfer_amount_cton = amount_cton - fee_in_cton;
    int fee_in_ton = cal_withdraw_ton_amount(fee_in_cton, vault::total_deposited, cton::total_supply + cton::total_staked);
    vault::total_fee += fee_in_ton;

    throw_unless(error::bad_collateral, calculate_collateral_rate(cton::total_staked - amount_cton, oracle::cton_price, ctUSD::total_borrow) > HEALTHY_COLLATERAL_RATE);

    if(is_recieve_ton){
        int transfer_amount_ton = cal_withdraw_ton_amount(tranfer_amount_cton, vault::total_deposited, cton::total_supply + cton::total_staked);
        throw_unless(error::balance_error, vault::total_deposited > transfer_amount_ton);
        builder excess = begin_cell().store_op(op::excesses).store_query_id(0);
        send_raw_message(create_msg(FALSE, to_address, null(), excess, transfer_amount_ton), SEND_MODE_CARRY_ALL_REMAINING_MESSAGE_VALUE);

        cton::total_staked -= amount_cton;
        vault::total_deposited -= (transfer_amount_ton + fee_in_ton);
    } else {
        cton::total_staked -= amount_cton;
        cton::total_supply += tranfer_amount_cton;
        vault::total_deposited -= fee_in_ton;
        send_mint_message(cton::minter_address, to_address, fee_min_jetton(), tranfer_amount_cton, 0, SEND_MODE_CARRY_ALL_REMAINING_MESSAGE_VALUE);
      
    } 
    ctUSD::total_supply -= convert_amount;
}

;; user deposit ton
() deposit(int msg_value, slice in_msg_body, slice sender_address) impure inline {
    int deposit_amount = in_msg_body~load_coins();
    int is_mint = in_msg_body~load_bool(); ;; need remove
    slice to_address = in_msg_body~load_msg_addr();
    check_same_workchain(to_address);
    
    throw_unless(error::deposit_amount_too_low, deposit_amount >= MIN_DEPOSIT_AMOUNT);

    validate_oracle(in_msg_body~load_ref().begin_parse());
    in_msg_body.end_parse();

    int collateral_amount = cal_mint_cton_amount(deposit_amount, vault::total_deposited, cton::total_supply + cton::total_staked);
    int total_amount = vault::deposit_fee + deposit_amount;
    int min_value = vault_deposit_fee() + total_amount;

    throw_unless(error::insufficient_fee, msg_value >= min_value + vault_wallet_deposit_fee());
    
    builder body_request = begin_cell()
                .store_op(op::request_stake)
                .store_query_id(0)
                .store_coins(collateral_amount)
                .store_slice(sender_address)
                .store_coins(cton::acc_reward_per_share)
                .store_uint32(cton::time_delay_withdraw);
    int ton_amount = msg_value - min_value;
    send_message_to_wallet(to_address, body_request, TRUE, ton_amount, SEND_MODE_PAY_FEES_SEPARATELY);

    cton::total_staked += collateral_amount;
    vault::total_deposited += total_amount;
}
;; user withdraw cton
() unstake(int msg_value, slice in_msg_body, slice sender_address) impure inline {
    int unstake_amount = in_msg_body~load_coins();
    slice to_address = in_msg_body~load_msg_addr();
    check_same_workchain(to_address);
    validate_oracle(in_msg_body~load_ref().begin_parse());
    in_msg_body.end_parse();

    int min_value = vault_unstake_fee();
    throw_unless(error::insufficient_fee, msg_value >= min_value + vault_wallet_unstake_fee());
    throw_unless(error::bad_collateral, calculate_collateral_rate(cton::total_staked - unstake_amount, oracle::cton_price, ctUSD::total_borrow) > HEALTHY_COLLATERAL_RATE);

    builder body_request = begin_cell()
                .store_op(op::request_mint_cton)
                .store_query_id(0)
                .store_coins(unstake_amount)
                .store_uint64(oracle::cton_price)
                .store_slice(to_address)
                .store_coins(cton::acc_reward_per_share)
                .store_slice(cton::minter_address)
                .store_coins(ctUSD::borrow_index);

    int ton_amount = msg_value - min_value;
    send_message_to_wallet(sender_address, body_request, FALSE, ton_amount, SEND_MODE_BOUNCE_ON_ACTION_FAIL);
    cton::total_supply += unstake_amount;
    cton::total_staked -= unstake_amount;
}

() request_withdraw(int my_balance, int msg_value, slice in_msg_body, slice sender_address) impure inline {
    int withdraw_amount = in_msg_body~load_coins();
    throw_unless(error::insufficient_fee, msg_value >= vault_withdraw_ton_fee() + vault_wallet_withdraw_ton_fee());
    throw_unless(error::insufficient_balance, my_balance >= cal_withdraw_ton_amount(withdraw_amount, vault::total_deposited, cton::total_supply + cton::total_staked));
    validate_oracle(in_msg_body~load_ref().begin_parse());
    throw_unless(error::bad_collateral, calculate_collateral_rate(cton::total_staked - withdraw_amount, oracle::cton_price, ctUSD::total_borrow) > HEALTHY_COLLATERAL_RATE);
    builder body_request = begin_cell()
                            .store_op(op::request_withdraw)
                            .store_query_id(0)
                            .store_coins(withdraw_amount)
                            .store_uint64(oracle::cton_price)
                            .store_coins(cton::acc_reward_per_share)
                            .store_coins(ctUSD::borrow_index);
    send_message_to_wallet(sender_address, body_request, FALSE, 0, SEND_MODE_CARRY_ALL_REMAINING_MESSAGE_VALUE);
}

() borrow(int msg_value, slice in_msg_body, slice sender_address) impure inline {
    int borrow_amount = in_msg_body~load_coins();        
    throw_unless(error::insufficient_fee, msg_value >= vault_borrow_fee() + vault_wallet_borrow_fee());
    validate_oracle(in_msg_body~load_ref().begin_parse());
    in_msg_body.end_parse();
    throw_unless(error::bad_collateral, calculate_collateral_rate(cton::total_staked, oracle::cton_price, ctUSD::total_borrow + borrow_amount) > SAFE_COLLATERAL_RATE);
    builder body_request = begin_cell()
            .store_op(op::mint_ctUSD)
            .store_query_id(0)
            .store_coins(borrow_amount)
            .store_uint64(oracle::cton_price)
            .store_coins(ctUSD::borrow_index)
            .store_slice(ctUSD::minter_address);

    send_message_to_wallet(sender_address, body_request, FALSE, 0, SEND_MODE_CARRY_ALL_REMAINING_MESSAGE_VALUE);
}

() borrow_notification(int msg_value, slice in_msg_body, slice sender_address) impure inline {
    int borrow_amount = in_msg_body~load_coins();
    slice from_address = in_msg_body~load_msg_addr();
    is_from_vault_wallet_address(from_address, sender_address);
    in_msg_body.end_parse();

    ctUSD::total_supply += borrow_amount;
    ctUSD::total_borrow += borrow_amount;

    builder excess = begin_cell().store_op(op::excesses).store_query_id(0);
    send_raw_message(create_msg(FALSE, from_address, null(), excess, 0), SEND_MODE_CARRY_ALL_REMAINING_MESSAGE_VALUE);
}

() burn_notification(int my_balance, int msg_value, slice in_msg_body, slice sender_address) impure inline {
    int burn_amount = in_msg_body~load_coins();
    slice response_address = in_msg_body~load_msg_addr();
    cell payload = in_msg_body~load_maybe_ref();
    in_msg_body.end_parse();
    try {
        if(equal_slices(cton::minter_address, sender_address)){
            validate_oracle(payload.begin_parse());
            throw_unless(error::insufficient_fee, msg_value >= vault_stake_fee() + vault_wallet_stake_fee());

            builder body_request = begin_cell()
                                        .store_op(op::request_stake)
                                        .store_query_id(0)
                                        .store_coins(burn_amount)
                                        .store_slice(response_address)
                                        .store_coins(cton::acc_reward_per_share)
                                        .store_uint32(cton::time_delay_withdraw); 
            cton::total_staked += burn_amount;
            cton::total_supply -= burn_amount;
            send_message_to_wallet(response_address, body_request, TRUE, 0, SEND_MODE_CARRY_ALL_REMAINING_MESSAGE_VALUE);
        } elseif (equal_slices(ctUSD::minter_address, sender_address)) {
            slice ds_payload = payload.begin_parse();
            int is_conversion = ds_payload~load_bool();
            validate_oracle(ds_payload~load_ref().begin_parse());
            
            if (is_conversion & calculate_rate(calculate_collateral_value(cton::total_staked, oracle::cton_price) - burn_amount, ctUSD::total_borrow) > SAFE_COLLATERAL_RATE) {
                int is_recieve_ton = ds_payload~load_bool();
                direct_conversion(my_balance, msg_value, burn_amount, response_address, is_recieve_ton);
            } else {
                throw_unless(error::insufficient_fee, msg_value >= vault_repay_fee() + vault_wallet_repay_fee());
                builder body_request = begin_cell()
                                    .store_op(op::repay)
                                    .store_query_id(0)
                                    .store_coins(burn_amount)
                                    .store_coins(ctUSD::borrow_index)
                                    .store_uint32(ctUSD::time_delay_repay);  
                                
                send_message_to_wallet(response_address, body_request, TRUE, 0, SEND_MODE_CARRY_ALL_REMAINING_MESSAGE_VALUE);
            }
        }
    } catch(_,_) {
        send_msg_excess_with_remainning_value(response_address);
    }
}

() request_liquidation(int msg_value, slice in_msg_body, slice sender_address) impure inline {
    int repay_amount = in_msg_body~load_coins();
    int collateral = in_msg_body~load_coins();
    slice liquidator = in_msg_body~load_msg_addr();
    slice debtor_address = in_msg_body~load_msg_addr();

    validate_oracle(in_msg_body~load_ref().begin_parse());

    throw_unless(error::insufficient_fee, msg_value >= (vault_request_liquidation_fee() + vault_liquidation_notification_fee() + vault_wallet_liquidation_fee() + vault_wallet_liquidation_finished_fee()));

    is_from_vault_wallet_address(liquidator, sender_address);
    throw_unless(error::not_enough_collateral, calculate_collateral_rate(collateral, oracle::cton_price, repay_amount) > HEALTHY_COLLATERAL_RATE);

    builder body_request = begin_cell()
            .store_op(op::liquidation)
            .store_query_id(0)
            .store_slice(liquidator)
            .store_coins(repay_amount)
            .store_uint64(oracle::cton_price)
            .store_coins(cton::acc_reward_per_share)
            .store_coins(ctUSD::borrow_index);
    send_message_to_wallet(debtor_address, body_request, FALSE, 0, SEND_MODE_CARRY_ALL_REMAINING_MESSAGE_VALUE);
}

() liquidate_notification(slice in_msg_body, slice sender_address) impure inline {
    oracle::cton_price = in_msg_body~load_uint64();
    int amount_for_liquidator = in_msg_body~load_coins();
    int amount_for_protocol = in_msg_body~load_coins();
    int repay_amount = in_msg_body~load_coins();
    int principal_amount = in_msg_body~load_coins();
    slice liquidator = in_msg_body~load_msg_addr();
    slice from_address = in_msg_body~load_msg_addr();
    in_msg_body.end_parse();

    is_from_vault_wallet_address(from_address, sender_address);
    
    ;; Bad debt, debtor's assets are less than 100%
    if(amount_for_liquidator == 0) {
        ctUSD::total_borrow -= principal_amount;
    }
    ;; Update reward and interest rate for the liquidator at the most recent point in time.
    builder request = begin_cell()
                            .store_op(op::liquidation_finished)
                            .store_query_id(0)
                            .store_coins(repay_amount)
                            .store_coins(principal_amount)
                            .store_coins(amount_for_liquidator)
                            .store_coins(cton::acc_reward_per_share)
                            .store_uint32(cton::time_delay_withdraw)
                            .store_coins(ctUSD::borrow_index);
    send_message_to_wallet(liquidator, request, FALSE, 0, SEND_MODE_CARRY_ALL_REMAINING_MESSAGE_VALUE);

    ;; vault::total_fee +=  cal_withdraw_ton_amount(amount_for_protocol, vault::total_deposited, cton::total_supply + cton::total_staked);
    cton::total_staked -= amount_for_protocol;
}

() forced_liquidation(int msg_value, slice in_msg_body, slice sender_address) impure inline {
    slice debtor_address = in_msg_body~load_msg_addr();
    validate_oracle(in_msg_body~load_ref().begin_parse());
    in_msg_body.end_parse();
    throw_unless(error::insufficient_fee, msg_value >= (vault_forced_liquidation_fee() + vault_forced_liquidation_notification_fee() + vault_wallet_forced_liquidation_notification_fee()));
    int collateral_rate = calculate_collateral_rate(cton::total_staked, oracle::cton_price, ctUSD::total_borrow);
    int bad_status = collateral_rate < HEALTHY_COLLATERAL_RATE;
    builder request = begin_cell()
                            .store_op(op::forced_liquidation)
                            .store_query_id(0)
                            .store_bool(bad_status)
                            .store_uint64(oracle::cton_price)
                            .store_coins(cton::acc_reward_per_share)
                            .store_coins(ctUSD::borrow_index)
                            .store_slice(sender_address);
    send_message_to_wallet(debtor_address, request, FALSE, 0, SEND_MODE_CARRY_ALL_REMAINING_MESSAGE_VALUE);
}

() forced_liquidation_notification(slice in_msg_body, slice sender_address, slice controller_address) impure inline {
    oracle::cton_price = in_msg_body~load_uint64();
    int principal_amount = in_msg_body~load_coins();
    int total_assets_repaid = in_msg_body~load_coins();
    slice from_address = in_msg_body~load_msg_addr();
    in_msg_body.end_parse();

    is_from_vault_wallet_address(from_address, sender_address);
    
    update_reward_debt(now());
    accrue_interest(now());

    int total_assets_repaid_in_ton = cal_withdraw_ton_amount(total_assets_repaid, vault::total_deposited, cton::total_staked + cton::total_supply);
    cton::total_staked -= total_assets_repaid;
    ctUSD::total_borrow -= principal_amount;
    vault::total_deposited -= total_assets_repaid_in_ton;

    builder excess = begin_cell().store_op(op::excesses).store_query_id(0);
    send_raw_message(create_msg(FALSE, controller_address, null(), excess, total_assets_repaid_in_ton), SEND_MODE_CARRY_ALL_REMAINING_MESSAGE_VALUE);
}

;; Only admin can execute
() admin_functions(int msg_value, slice in_msg_body, int is_open?, slice controller_address, slice admin_address) impure inline {
    (int op, int query_id) = in_msg_body~load_op_and_query_id();

    if (op == op::upgrade_code){
        cell new_code = in_msg_body~load_ref();
        set_code(new_code);
        return();
    }

    if (op == op::upgrade_data){
        cell new_data = in_msg_body~load_ref();
        set_data(new_data);
        return();
    }

    if (op == op::upgrade_oracle){
        slice ds_oracle_info = in_msg_body~load_ref().begin_parse();
        oracle::provider_public_key = ds_oracle_info~load_uint256();
        oracle::assets_key = ds_oracle_info~load_uint256();
        oracle::deviation_threshold = ds_oracle_info~load_uint8();
        save_data(is_open?, controller_address, admin_address);
        return();
    }

    if (op == op::upgrade_jetton_address){
        cton::minter_address = in_msg_body~load_msg_addr();
        ctUSD::minter_address = in_msg_body~load_msg_addr();
        save_data(is_open?, controller_address, admin_address);
        return();
    }

    if (op == op::set_ctUSD_config){
        ctUSD::accrual_interval = in_msg_body~load_uint32();
        ctUSD::repay_without_debt_fee = in_msg_body~load_uint16();
        ctUSD::interest_rate = in_msg_body~load_uint32();
        ctUSD::time_delay_repay = in_msg_body~load_uint32();
        save_data(is_open?, controller_address, admin_address);
        return();
    }
    
    if (op == op::change_admin) {
        slice next_admin_address = in_msg_body~load_msg_addr();
        slice next_controller_address = in_msg_body~load_msg_addr();
        in_msg_body.end_parse();
        save_data(is_open?, next_controller_address, next_admin_address);
        return ();
    }

    if (op == op::set_data_for_wallet) {
        slice to_address = in_msg_body~load_msg_addr();
        cell data = in_msg_body~load_ref();
        in_msg_body.end_parse();
        builder request = begin_cell().store_op(op::set_data).store_query_id(0).store_ref(data);
        send_message_to_wallet(to_address, request, TRUE, 0, SEND_MODE_CARRY_ALL_REMAINING_MESSAGE_VALUE);
        return ();
    }
       
    ;; Open for user to deposit
    if (op == op::open){
        is_open? ? (is_open? = FALSE) : (is_open? = TRUE);
        save_data(is_open?, controller_address, admin_address);
        return ();
    }

    throw(error::invalid_op);
}
;; User can execute
() mutative_functions(int my_balance, int msg_value, slice in_msg_body, slice sender_address, int is_open?, slice controller_address, slice admin_address) impure inline {
    (int op, int query_id) = in_msg_body~load_op_and_query_id();
    ;; check open for user
    throw_unless(error::not_open, is_open?);
    
    update_reward_debt(now());

    if (op == op::deposit){
        deposit(msg_value, in_msg_body, sender_address);
        save_data(is_open?, controller_address, admin_address);
        return();
    }
    
    if (op == op::unstake){
        unstake(msg_value, in_msg_body, sender_address);
        save_data(is_open?, controller_address, admin_address);
        return();
    }

    if (op == op::execute_withdraw){
        int redeem_amount = in_msg_body~load_coins();
        slice to_address = in_msg_body~load_msg_addr();
        is_from_vault_wallet_address(to_address, sender_address);

        int transfer_amount = cal_withdraw_ton_amount(redeem_amount, vault::total_deposited, cton::total_supply + cton::total_staked);
        int fee = transfer_amount * ONE_PERCENT  / ONE_HUNDRED_PERCENT;
        int forward_amount_fee = msg_value - vault_execute_withdraw_ton_fee() + transfer_amount - fee;
        builder excess = begin_cell().store_op(op::excesses).store_query_id(query_id);
        send_raw_message(create_msg(FALSE, to_address, null(), excess, forward_amount_fee), SEND_MODE_REGULAR);
        cton::total_staked -= redeem_amount;
        vault::total_deposited -= transfer_amount;
        vault::total_fee += fee;
        save_data(is_open?, controller_address, admin_address);
        return();
    }

    if (op == op::request_withdraw) {
        request_withdraw(my_balance, msg_value, in_msg_body, sender_address);
        save_data(is_open?, controller_address, admin_address);
        return();
    }

    if (op == op::borrow){
        borrow(msg_value, in_msg_body, sender_address);
        save_data(is_open?, controller_address, admin_address);
        return();
    }
    if (op == op::borrow_notification){
        borrow_notification(msg_value, in_msg_body, sender_address);
        save_data(is_open?, controller_address, admin_address);
        return();
    }
    ;; handle message upon receiving burn token notification (cTon, ctUSD)
    if (op == op::burn_notification){
        burn_notification(my_balance, msg_value, in_msg_body, sender_address);
        save_data(is_open?, controller_address, admin_address);
        return();
    }
    ;; Request liquidate position from user or controller  
    if (op == op::request_liquidation){
        request_liquidation(msg_value, in_msg_body, sender_address);
        save_data(is_open?, controller_address, admin_address);
        return();
    }

    if (op == op::liquidate_notification){
        liquidate_notification(in_msg_body, sender_address);
        save_data(is_open?, controller_address, admin_address);
        return();
    }

    if (op == op::forced_liquidation){
        forced_liquidation(msg_value, in_msg_body, sender_address);
        save_data(is_open?, controller_address, admin_address);
        return();
    }

    if (op == op::forced_liquidation_notification){
        forced_liquidation_notification(in_msg_body, sender_address, controller_address);
        save_data(is_open?, controller_address, admin_address);
        return();
    }
    
    if (op == op::convert){
        int convert_amount = in_msg_body~load_coins();
        int is_recieve_ton = in_msg_body~load_bool();
        slice from_address = in_msg_body~load_msg_addr();
        is_from_vault_wallet_address(from_address, sender_address);
        validate_oracle(in_msg_body~load_ref().begin_parse());
        direct_conversion(my_balance, msg_value, convert_amount, from_address, is_recieve_ton);
        save_data(is_open?, controller_address, admin_address);
        return();
    }
    ;; User request claim reward from stake cTon
    if (op == op::claim){
        int player_id = in_msg_body~load_uint64();
        builder request = begin_cell()
                                .store_op(op::claim)
                                .store_query_id(query_id)
                                .store_uint64(player_id)
                                .store_coins(cton::acc_reward_per_share);

        send_message_to_wallet(sender_address, request, FALSE, 0, SEND_MODE_CARRY_ALL_REMAINING_MESSAGE_VALUE);
        save_data(is_open?, controller_address, admin_address);
        return();
    }

    ;; notification after claim reward
    if (op == op::claim_notification){
        int reward = in_msg_body~load_coins();
        in_msg_body~load_uint64();
        slice to_address = in_msg_body~load_msg_addr();
        builder excess = begin_cell().store_op(op::excesses).store_query_id(query_id);
        send_raw_message(create_msg(FALSE, to_address, null(), excess, 0), SEND_MODE_CARRY_ALL_REMAINING_MESSAGE_VALUE);
        save_data(is_open?, controller_address, admin_address);
        return();
    }

    ;; Receive TON profits from any revenue sources.
    if (op == op::profit){
        int amount = in_msg_body~load_coins();
        throw_unless(error::insufficient_balance, msg_value >= amount);
        vault::total_deposited += amount;
        save_data(is_open?, controller_address, admin_address);
        return ();
    }

    ;; The assets obtained by the controller after full liquidation will be returned when the user converts ctUSD to TON or cTON.
    if (op == op::reimburse){
        int amount = in_msg_body~load_coins();
        validate_oracle(in_msg_body~load_ref().begin_parse());
        in_msg_body.end_parse();
        throw_unless(error::insufficient_balance, msg_value >= amount);
        int collateral_amount = cal_mint_cton_amount(amount, vault::total_deposited, cton::total_supply + cton::total_staked);
        vault::total_deposited += amount;
        cton::total_staked += collateral_amount;
        save_data(is_open?, controller_address, admin_address);
        return ();
    }
    
    throw(error::invalid_op);
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore empty messages
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int msg_flags = cs~load_msg_flags();
    if (is_bounced(msg_flags)) {
        on_bounce(in_msg_body);
        return ();
    }
   
    slice sender_address = cs~load_msg_addr();
    
    (int is_open?, slice controller_address, slice admin_address) = load_data();

    if (equal_slices(admin_address, sender_address)) {
        admin_functions(msg_value, in_msg_body, is_open?, controller_address, admin_address);
    } else {
        mutative_functions(my_balance, msg_value, in_msg_body, sender_address, is_open?, controller_address, admin_address);

    }
}

(int, int, int, int, slice, slice, cell, int, int, int, int, int, int, slice, int, int, int, int, int, int, int, int, slice, int, int, int) get_vault_data() method_id {
    (int is_open?, slice controller_address, slice admin_address) = load_data();
    return (
        is_open?, 
        vault::total_deposited, 
        vault::total_fee, 
        vault::deposit_fee, 
        controller_address, 
        admin_address, 
        vault::wallet_code,
        
        cton::total_supply,
        cton::total_staked,
        cton::time_delay_withdraw, 
        cton::reward_per_second, 
        cton::acc_reward_per_share, 
        cton::last_reward_time, 
        cton::minter_address, 

        ctUSD::total_supply, 
        ctUSD::total_borrow, 
        ctUSD::time_delay_repay, 
        ctUSD::repay_without_debt_fee,
        ctUSD::interest_rate, 
        ctUSD::borrow_index, 
        ctUSD::last_accrual_time, 
        ctUSD::accrual_interval, 
        ctUSD::minter_address,

        oracle::provider_public_key,
        oracle::assets_key,
        oracle::deviation_threshold
    );
}

(int, int, int, int) get_flexible_data(int price) method_id {
    (int is_open?, slice controller_address, slice admin_address) = load_data();
    oracle::cton_price = price * calculate_ton_cton_ratio() / ONE_TON;
    update_reward_debt(now());
    accrue_interest(now());
    int collateral_rate = calculate_collateral_rate(cton::total_staked, oracle::cton_price, ctUSD::total_borrow);
    return (cton::acc_reward_per_share, ctUSD::borrow_index, collateral_rate, oracle::cton_price);
}

slice get_wallet_address(slice owner_address) method_id {
    (int is_open?, slice controller_address, slice admin_address) = load_data();
    return calculate_user_vault_wallet_address(owner_address, my_address(), vault::wallet_code);
}

(int, int, int, int, int, int, int, int, int, int) get_est_fee() method_id {
    load_data();
    int deposit_to_stake_fee = vault_deposit_fee() + vault::deposit_fee + vault_wallet_deposit_fee() + FEE_COMMON;
    int deposit_to_mint_fee = vault_deposit_to_mint_fee() + vault::deposit_fee + vault_wallet_to_mint_fee() + FEE_COMMON;
    int unstake_fee = vault_unstake_fee() + vault_wallet_unstake_fee() + FEE_COMMON;
    int stake_fee = vault_stake_fee() + vault_wallet_stake_fee() + FEE_COMMON + 2 * get_forward_fee(MY_WORKCHAIN, BURN_NOTIFICATION_BITS, BURN_NOTIFICATION_CELLS) + get_compute_fee(MY_WORKCHAIN, SEND_BURN_GAS_CONSUMPTION) + get_compute_fee(MY_WORKCHAIN, RECEIVE_BURN_GAS_CONSUMPTION);
    int withdraw_ton_fee = vault_withdraw_ton_fee() + vault_wallet_withdraw_ton_fee() + vault_execute_withdraw_ton_fee() + FEE_COMMON;
    int borrow_fee = vault_borrow_fee() + vault_wallet_borrow_fee() + VAULT_WALLET_BORROW_NOTIFICATION_OUT_FORWARD_FEE + FEE_COMMON;
    int repay_fee = vault_repay_fee() + vault_wallet_repay_fee() + 2 * get_forward_fee(MY_WORKCHAIN, BURN_NOTIFICATION_BITS, BURN_NOTIFICATION_CELLS) + get_compute_fee(MY_WORKCHAIN, SEND_BURN_GAS_CONSUMPTION) + get_compute_fee(MY_WORKCHAIN, RECEIVE_BURN_GAS_CONSUMPTION) + FEE_COMMON;
    int convert_fee = vault_convert_fee() + vault_wallet_convert_fee() + vault_wallet_request_convert_fee() + FEE_COMMON;
    int liquidation_fee = vault_request_liquidation_fee() + vault_liquidation_notification_fee() + vault_wallet_request_liquidation_fee() + vault_wallet_liquidation_fee() + vault_wallet_liquidation_finished_fee() + FEE_COMMON;
    int forced_liquidation_fee = vault_request_liquidation_fee() + vault_liquidation_notification_fee() + vault_wallet_liquidation_fee() + vault_wallet_liquidation_finished_fee() + FEE_COMMON;
    return (deposit_to_stake_fee, deposit_to_mint_fee, unstake_fee, stake_fee, withdraw_ton_fee, borrow_fee, repay_fee, convert_fee, liquidation_fee, forced_liquidation_fee);
}
