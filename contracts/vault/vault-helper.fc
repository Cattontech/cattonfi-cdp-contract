#pragma version >=0.4.4;
#include "constants.fc";
builder store_state_init(builder b, builder state_init) inline {
    return state_init.null?()
    ? b.store_uint(0, 1)
    : b.store_uint(2 + 0, 1 + 1).store_builder(state_init);
}

builder store_body(builder b, builder body) inline {
    return body.builder_bits() <= (513 - 265)
    ? b.store_uint(0, 1).store_builder(body)
    : b.store_maybe_ref(body.end_cell());
}

int forward_fee_of(cell msg) impure inline {
    slice cs = msg.begin_parse();
    ;; https://github.com/ton-blockchain/ton/blob/140320b0dbe0bdd9fd954b6633a3677acc75a8e6/crypto/vm/tonops.cpp#L1278
    var (c_cells, c_bits, _) = msg.compute_data_size((1 << 63) - 1);
    int cs_bits = cs.slice_bits();
    int forward_fee = get_forward_fee(MY_WORKCHAIN, c_bits - cs_bits, c_cells - 1);
    return forward_fee;
}

;; 6 + 267 + 124 + 1 + 4 + 4 + 64 + 32 + 2 + 5 + 1 + 513
cell build_msg(int bounceable?, slice dst, builder state_init, builder body, int coins) inline_ref {
    ;; extra_currencies$_ dict:(HashmapE 32 (VarUInteger 32)) 
    ;;   = ExtraCurrencyCollection;
    ;; currencies$_ grams:Grams other:ExtraCurrencyCollection 
    ;;   = CurrencyCollection;
    ;; int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool
    ;;   src:MsgAddress dest:MsgAddressInt
    ;;   value:CurrencyCollection ihr_fee:Grams fwd_fee:Grams
    ;;   created_lt:uint64 created_at:uint32 = CommonMsgInfoRelaxed;
    ;; message$_ {X:Type} info:CommonMsgInfoRelaxed
    ;;   init:(Maybe (Either StateInit ^StateInit))
    ;;   body:(Either X ^X) = MessageRelaxed X;
    cell msg = begin_cell()
    .store_uint(bounceable? ? 0x18 : 0x10, 6) ;; 011000 or 010000
    .store_slice(dst)
    .store_coins(coins)
    .store_uint(0, 1 + 4 + 4 + 64 + 32)
    .store_state_init(state_init)
    .store_body(body)
    .end_cell();
    return msg;
}

cell create_msg(int bounceable?, slice dst, builder state_init, builder body, int coins) impure inline_ref {
    return build_msg(bounceable?, dst, state_init, body, coins);
}

() send_mint_message(slice dst, slice to_address, int forward_fee, int jetton_amount, int total_fee, int mode) impure inline_ref {
    builder body = begin_cell()
                .store_op(op::mint)
                .store_query_id(0)
                .store_slice(to_address)
                .store_coins(forward_fee) 
                .store_ref(begin_cell()
                            .store_op(op::internal_transfer)
                            .store_query_id(0)
                            .store_coins(jetton_amount)
                            .store_slice(to_address)
                            .store_slice(to_address)
                            .store_coins(0)
                            .store_bool(FALSE)
                            .end_cell());
    send_raw_message(create_msg(TRUE, dst, null(), body, total_fee), mode);
}
() send_msg_excess_with_remainning_value(slice to_address) impure inline {
    builder excess = begin_cell().store_op(op::excesses).store_query_id(0);
    send_raw_message(create_msg(FALSE, to_address, null(), excess, 0), SEND_MODE_CARRY_ALL_REMAINING_MESSAGE_VALUE);
}

(int, int) cal_reward_debt(int current_time, int reward_per_second, int acc_reward_per_share, int last_reward_time, int total_stake_cton) inline {
    int time_reward = current_time - last_reward_time;
    int reward = time_reward * reward_per_second;

    if((reward > 0) & (total_stake_cton > 0)) {
        acc_reward_per_share += reward * ACC_REWARD_PRECISION / total_stake_cton;
    }
    return (acc_reward_per_share, current_time);
}


int cal_mint_cton_amount(int from_amount, int total_deposited, int total_supply) inline {
    if ((total_supply == 0) | (total_deposited == 0) ) {
        return from_amount;
    }
    return from_amount * total_supply / total_deposited;
}

int cal_withdraw_ton_amount(int jetton_amount, int total_deposited, int total_supply) inline {
    if(total_supply == 0){
        return 0;
    }
    return jetton_amount * total_deposited / total_supply;
}


(int, int) cal_accrue_interest(int current_time, int interest_rate, int borrow_index, int last_accrual_time, int accrual_interval, int total_borrow, int total_amount) inline {
    if((last_accrual_time == 0) | (total_borrow == 0)){
        last_accrual_time = (current_time / accrual_interval) * accrual_interval;
    } else {
        int n_interval = (current_time - last_accrual_time) / accrual_interval;
        if (n_interval > 0) {
            borrow_index += ( n_interval * interest_rate * total_borrow ) / total_amount;
            last_accrual_time += n_interval * accrual_interval;
        }
    }
    return (borrow_index, last_accrual_time);
}

;; value in USD
int calculate_collateral_value(int collateral, int price) inline {
    return collateral * price / ONE_TON;
}

int calculate_max_borrow(int collateral, int price) inline {
    return calculate_collateral_value(collateral, price) * ONE_HUNDRED_PERCENT / HEALTHY_COLLATERAL_RATE;
}

int calculate_collateral_rate(int collateral, int price, int borrow_amount) inline {
    if (borrow_amount <= 0) {
        return GOOD_COLLATERAL_RATE;
    }
    return calculate_collateral_value(collateral, price) * ONE_HUNDRED_PERCENT / borrow_amount;
}

int calculate_rate(int collateral_value, int borrow_amount) inline {
    if (borrow_amount <= 0) {
        return GOOD_COLLATERAL_RATE;
    }
    return collateral_value * ONE_HUNDRED_PERCENT / borrow_amount;
}

;; in collateral
(int, int) calculate_profit_liquidate(int collateral_value, int price) inline {
    if (collateral_value <= 0) {
        return (0, 0);
    }
    int amount_for_liquidator = collateral_value * LIQUIDATION_REWARD_FOR_LIQUIDATOR * ONE_TON / price / ONE_HUNDRED_PERCENT;
    int amount_for_protocol  = collateral_value * LIQUIDATION_REWARD_FOR_PROTOCOL * ONE_TON / price / ONE_HUNDRED_PERCENT;
    return (amount_for_liquidator, amount_for_protocol);
}

;; should > 150%; eg: 151%
int calculate_min_collateral(int borrow_amount, int price) inline {
    if (borrow_amount <= 0) {
        return 0;
    }
    return borrow_amount * (HEALTHY_COLLATERAL_RATE + ONE_PERCENT) * ONE_TON / ONE_HUNDRED_PERCENT / price;
}

int calculate_amount_can_withdraw(int collateral, int price, int borrow_amount) inline {
    if (collateral <= 0) {
        return 0;
    }

    if(borrow_amount <= 0) {
        return collateral;
    }
    
    int min_collateral_value = calculate_min_collateral(borrow_amount, price);
    if(min_collateral_value <= 0) {
        return collateral;
    }

    if (collateral > min_collateral_value) {
        return collateral - min_collateral_value;
    } 
    return 0;
}

int calculate_liquidation_price(int collateral, int borrow_amount, int rate) inline {
    if((borrow_amount == 0) | (collateral == 0)) {
        return -1;
    }
    if (borrow_amount > collateral) {
        return -2;
    }
    return rate * borrow_amount * ONE_TON / collateral / ONE_HUNDRED_PERCENT;
}

int convert_ctUSD_to_cTon(int collateral_value, int price) inline {
    return collateral_value * ONE_TON / price;
}

int calculate_fee(int value, int fee) inline {
    if ((fee == 0) | (value == 0)) {
        return 0;
    }
    return value * fee / ONE_HUNDRED_PERCENT;
}
