#include "../imports/workchain.fc";
#include "../imports/errors.fc";

const int STATUS_SIZE = 4;

cell pack_jetton_wallet_data(int status, int balance, slice owner_address, slice jetton_master_address) inline {
    return begin_cell()
    .store_uint(status, STATUS_SIZE)
    .store_coins(balance)
    .store_slice(owner_address)
    .store_slice(jetton_master_address)
    .end_cell();
}

cell calculate_jetton_wallet_state_init(slice owner_address, slice jetton_master_address, cell jetton_wallet_code) inline {
    {-
    https://github.com/ton-blockchain/ton/blob/8a9ff339927b22b72819c5125428b70c406da631/crypto/block/block.tlb#L144
    _ split_depth:(Maybe (## 5)) special:(Maybe TickTock)
    code:(Maybe ^Cell) data:(Maybe ^Cell)
    library:(Maybe ^Cell) = StateInit;
  -}
    return begin_cell()
    .store_uint(0, 2) ;; 0b00 - No split_depth; No special
    .store_maybe_ref(jetton_wallet_code)
    .store_maybe_ref(
        pack_jetton_wallet_data(
            0, ;; status
            0, ;; balance
            owner_address,
            jetton_master_address)
    )
    .store_uint(0, 1) ;; Empty libraries
    .end_cell();
}

slice calculate_jetton_wallet_address(cell state_init) inline {
    {-
    https://github.com/ton-blockchain/ton/blob/8a9ff339927b22b72819c5125428b70c406da631/crypto/block/block.tlb#L105
    addr_std$10 anycast:(Maybe Anycast) workchain_id:int8 address:bits256  = MsgAddressInt;
    -}
    return begin_cell()
    .store_uint(4, 3) ;; 0b100 = addr_std$10 tag; No anycast
    .store_int(MY_WORKCHAIN, 8)
    .store_uint(cell_hash(state_init), 256)
    .end_cell()
    .begin_parse();
}

slice calculate_user_jetton_wallet_address(slice owner_address, slice jetton_master_address, cell jetton_wallet_code) inline {
    return calculate_jetton_wallet_address(calculate_jetton_wallet_state_init(owner_address, jetton_master_address, jetton_wallet_code));
}

() check_either_forward_payload(slice s) impure inline {
    if (s.preload_uint(1)) {
        ;; forward_payload in ref
        (int remain_bits, int remain_refs) = slice_bits_refs(s);
        throw_unless(error::invalid_message, (remain_refs == 1) & (remain_bits == 1)); ;; we check that there is no excess in the slice
    }
    ;; else forward_payload in slice - arbitrary bits and refs
}

cell pack_sVault_wallet_data(slice owner_address, slice vault_address) inline {
    return  begin_cell()
                .store_bool(-1)
                .store_slice(owner_address)
                .store_slice(vault_address)
                .store_ref(begin_cell().store_coins(0).store_coins(0).store_coins(0).store_uint32(0).end_cell())
                .end_cell();
}

builder calculate_sVault_wallet_state_init(slice owner_address, slice sVault_address, cell sVault_wallet_code) inline {
    return begin_cell()
          .store_uint(0, 2)
          .store_dict(sVault_wallet_code)
          .store_dict(pack_sVault_wallet_data(owner_address, sVault_address))
          .store_uint(0, 1);
}

slice calculate_contract_address(cell state_init) inline {
    return begin_cell().store_uint(4, 3)
                     .store_int(MY_WORKCHAIN, 8)
                     .store_uint(cell_hash(state_init), 256)
                     .end_cell()
                     .begin_parse();
}

slice calculate_user_sVault_wallet_address(slice owner_address, slice sVault_address, cell sVault_wallet_code) inline {
    return calculate_contract_address(calculate_sVault_wallet_state_init(owner_address, sVault_address, sVault_wallet_code).end_cell());
}